@page "/coachings/edit/{CoachingId:int}"
@inject NavigationManager navigationManager
@inject IRepository repository
@inject SweetAlertService sweetAlertService

<h3>Editar Entrenamiento</h3>

@if (coaching is null)
{
    <Loading />
}
else
{
    <CoachingForm @ref="coachingForm" Coaching="coaching" OnValidSubmit="SaveAsync" ReturnAction="Return" />
}

@code {
    private Coaching? coaching;
    private CoachingForm? coachingForm;

    [Parameter]
    public int CoachingId { get; set; }

    protected override async Task OnParametersSetAsync()
    {
        var response = await repository.GetAsync<Coaching>($"/api/coachings/{CoachingId}");
        if (response.Error)
        {
            if (response.HttpResponseMessage.StatusCode == HttpStatusCode.NotFound)
            {
                Return();
            }
            var message = await response.GetErrorMessageAsync();
            await sweetAlertService.FireAsync("Error", message, SweetAlertIcon.Error);
            return;
        }
        coaching = response.Response;
    }

    private async Task SaveAsync()
    {
        var response = await repository.PutAsync($"/api/coachings", coaching);
        if (response.Error)
        {
            var message = await response.GetErrorMessageAsync();
            await sweetAlertService.FireAsync("Error", message, SweetAlertIcon.Error);
            return;
        }
        Return();
        var toast = sweetAlertService.Mixin(new SweetAlertOptions
            {
                Toast = true,
                Position = SweetAlertPosition.BottomEnd,
                ShowConfirmButton = true,
                Timer = 3000
            });
        await toast.FireAsync(icon: SweetAlertIcon.Success, message: "Cambios guardados con éxito.");
    }

    private void Return()
    {
        coachingForm!.FormPostedSuccessfully = true;
        navigationManager.NavigateTo($"/positions/details/{coaching!.PositionId}");
    }
}