@inject IRepository repository
@inject SweetAlertService sweetAlertService

<NavigationLock OnBeforeInternalNavigation="OnBeforeInternalNavigationAsync"></NavigationLock>

<EditForm EditContext="editContext" OnValidSubmit="OnValidSubmit">
    <DataAnnotationsValidator />
    <div class="mb-3">
        <label>Capacitación:</label>
        <div>
            <InputText class="form-control" @bind-Value="@Capacitation.Name" />
            <ValidationMessage For="@(() => Capacitation.Name)" />
        </div>
    </div>

    <div class="mb-3">
        <label>Tema:</label>
        <div>
            <select class="form-select" id="temaselect">
                <option value="0">-- Seleccione un tema --</option>
                @if (themes is not null)
                {
                    @foreach (var theme in themes)
                    {
                        <option value="@theme.Id">@theme.Name</option>
                    }
                }
            </select>
        </div>
    </div>

    <button class="btn btn-primary" type="submit">Guardar</button>
    <button class="btn btn-success" @onclick="ReturnAction">Regresar</button>
</EditForm>

@code {
    private EditContext editContext = null!;

    protected override void OnInitialized()
    {
        editContext = new(Capacitation);
    }

    private List<Theme>? themes;

    [EditorRequired]
    [Parameter]
    public Capacitation Capacitation { get; set; } = null!;

    [EditorRequired]
    [Parameter]
    public EventCallback OnValidSubmit { get; set; }

    [EditorRequired]
    [Parameter]
    public EventCallback ReturnAction { get; set; }

    public bool FormPostedSuccessfully { get; set; }

    protected async override Task OnInitializedAsync()
    {
        await LoadThemesAsync();
    }

    private async Task LoadThemesAsync()
    {
        var responseHttp = await repository.GetAsync<List<Theme>>("/api/themes/GetCombo");
        if (responseHttp.Error)
        {
            var message = await responseHttp.GetErrorMessageAsync();
            await sweetAlertService.FireAsync("Error", message, SweetAlertIcon.Error);
            return;
        }

        themes = responseHttp.Response;
    }

    private async Task OnBeforeInternalNavigationAsync(LocationChangingContext context)
    {
        var formWasEdited = editContext.IsModified();

        if (!formWasEdited)
        {
            return;
        }

        if (FormPostedSuccessfully)
        {
            return;
        }

        var result = await sweetAlertService.FireAsync(new SweetAlertOptions
            {
                Title = "Confirmación",
                Text = "¿Deseas abandonar la página y perder los cambios?",
                Icon = SweetAlertIcon.Question,
                ShowCancelButton = true
            });

        var confirm = !string.IsNullOrEmpty(result.Value);

        if (confirm)
        {
            return;
        }

        context.PreventNavigation();
    }
}